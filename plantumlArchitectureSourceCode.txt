@startuml
allowmixing

package "Calculator Engine Package" #lightblue
{
    class Interpreter {
       - Interpreter()
       + {static} splitString(String text, boolean comma, boolean newLine) : String[]
       + {static} parseStringArrayToDoubleArray(String[] elements) : double[]
    }

    class CalculatorLogic {
       - CalculatorLogic()
       + {static} computeStandardDeviation(double[] values, boolean isPopulation) : double
       + {static} computeSampleStandardDeviation(double[] values) : double
       + {static} computePopulationStandardDeviation(double[] values) : double
       + {static} computeMean(double[] values) : double
       + {static} computeSquareOfDifferences(double[] values, double mean) : double
       + {static} computeVariance(double squareOfDifferences, int numValues, boolean isPopulation) : double
       + {static} computeZScore(double[] input) : double
       + {static} computeSingleLineRegressionFormula(double[] pairs) : double[]
       + {static} predictYFromLinearRegressionFormula(double[] input) : double
    }
}

package "Calculator Engine Unit Tests via JUnit" #lightyellow
{
  class CalculatorLogicTest {
     + computeSampleStandardDeviation_validList_returnsDouble() : void
     + computeSampleStandardDeviation_listOfZeroes_returnsZero() : void
     + computeSampleStandardDeviation_listOfOneSample_throwException() : void
     + computeSampleStandardDeviation_emptyList_throwException() : void
     + computePopulationStandardDeviation_validList_returnsDouble() : void
     + computePopulationStandardDeviation_listOfZeroes_returnsZero() : void
     + computePopulationStandardDeviation_emptyList_throwException() : void
     + computeMean_validList_returnsDouble() : void
     + computeMean_emptyList_throwsException() : void
     + computeVariance_emptyPopulation_throwException() : void
     + computeZScore_validInput_returnZ() : void
     + computeZScore_emptyInput_throwException() : void
     + computeZScore_missingParameter_throwException() : void
     + computeZScore_meanIsZero_returnZ() : void
     + computeSingleLineRegressionFormula_validInput_returnMB() : void
     + computeSingleLineRegressionFormula_emptyList_throwException() : void
     + computeSingleLineRegressionFormula_listOfEqualXValues_throwException() : void
     + computeSingleLineRegressionFormula_listOfEqualYValues_returnMB() : void
     + computeSingleLineRegressionFormula_listOfZeroPairs_throwException() : void
     + predictYFromLinearRegressionFormula_validInput_returnY() : void
     + predictYFromLinearRegressionFormula_missingParameter_throwException() : void
     + predictYFromLinearRegressionFormula_emptyInput_throwException() : void
  }

  CalculatorLogicTest --> CalculatorLogic

}

package "Calculator Web Server App" #lightblue
{
   class AppModel {
      - String values
      - String operation
      - boolean isError
      + AppModel(String values, String operation, boolean isError) : void
      + getError() : boolean
      + setError(boolean error) : void
      + getOperation() : String
      + setOperation(String operation) : void
      + getValues() : String
      + setValues(String values) : void
      + calculateData() : void
   }
   class Views
   class AppController {
      + output(String values, String method, Model model) : String
   }

   AppController --> Views : Handled by\nThymeleaf\nand Spring Boot,\nnot a tangible\nViews class
   AppController --> AppModel
   AppModel --> CalculatorLogic
   AppModel --> Interpreter
}

package "Calculator End-To-End Tests via Playwright" #lightyellow {
  class WebAppTest {
     + calculatorWebUi_pageTitle_isCalculator(Page page) : void
     + calculatorWebUi_computeSampleStandardDeviationButton_outputsResult(Page page) : void
     + calculatorWebUi_emptyInputPopulationStandardDeviationButton_outputsErrorMessage(Page page) : void
     + calculatorWebUi_emptyInputSampleStandardDeviationButton_outputsErrorMessage(Page page) : void
     + calculatorWebUi_computeMeanButton_outputsResult(Page page) : void
     + calculatorWebUi_computeZScoreButton_outputsResult(Page page) : void
     + calculatorWebUi_computeSingleLinearRegressionFormula_outputResult(Page page) : void
     + calculatorWebUi_computeYFromLinearRegressionFormula_outputResult(Page page) : void
  }

    WebAppTest --> AppController : HTTP Call via\n Headless Browser
}

cloud #yellow {
  hide circle
  class Browser
  Browser <--> AppController : HTTP Call
}
@enduml
